/*
 * Copyright (C) 2018  SuperGreenLab <towelie@supergreenlab.com>
 * Author: Constantin Clauzel <constantin.clauzel@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "../log/log.h"

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "nvs_flash.h"
#include "nvs.h"

#include "kv.h"
#include "../include_modules.h"

void init_helpers();
nvs_handle kv_handle;

void open_kv() {
  // Initialize NVS
  esp_err_t err = nvs_flash_init();
  if (err == ESP_ERR_NVS_NO_FREE_PAGES) {
    // NVS partition was truncated and needs to be erased
    // Retry nvs_flash_init
    ESP_ERROR_CHECK(nvs_flash_erase());
    err = nvs_flash_init();
  }
  ESP_ERROR_CHECK( err );

  err = nvs_open("kv_store", NVS_READWRITE, &kv_handle);
  if (err != ESP_OK) {
    ESP_LOGI(SGO_LOG_EVENT, "@KV Error (%s) opening NVS handle!\n", esp_err_to_name(err));
  }
}

void init_kv() {
  /*
   * [GENERATED]
   */

  init_helpers();
  
  <% Object.keys(modules).filter((m) => modules[m].enabled).forEach(m => {
    Object.keys(modules[m].fields).filter(f => modules[m].fields[f].nvs.enable).forEach(f => { f = modules[m].fields[f]%>
    <% if (f.type == 'integer') { %>
      int default_<%= f.name %> = <% if (f.default_var) { %><%= f.default_var %><% } else { %><%= f.default %><% } %>;
      default<%= f.signedness %>i<%= f.intlen %>(<%= f.caps_name %>, default_<%= f.name %>);
    <% } else { %>
      const char *default_<%= f.name %> = <% if (f.default_var) { %><%= f.default_var %><% } else { %>"<%= f.default %>"<% } %>;
      defaultstr(<%= f.caps_name %>, default_<%= f.name %>);
    <% } %>
  <% })}) %>

  // Initialize non-nvs keys
  <% Object.keys(modules).filter((m) => modules[m].enabled).forEach(m => {
    Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].nvs.enable && !modules[m].fields[f].indir.enable && !modules[m].fields[f].func).forEach(f => { f = modules[m].fields[f]%>
    if (is_<%= f.name %>_undefined()) {
      <% if(f.type == 'integer') { %>
        <%= f.signedness %>int<%= f.intlen %>_t default_<%= f.name %> = <% if (f.default_var) { %><%= f.default_var %><% } else { %><%= f.default %><% } %>;
      <% } else { %>
        const char *default_<%= f.name %> = <% if (f.default_var) { %><%= f.default_var %><% } else { %>"<%= f.default %>"<% } %>;
      <% } %>
      set_<%= f.name %>(default_<%= f.name %>);
    }
  <% })}) %>

  /*
   * [/GENERATED]
   */
}

bool hasi8(const char * key) {
  int8_t value;
  esp_err_t err = nvs_get_i8(kv_handle, (const char *)key, &value);
  return err == ESP_OK;
}

int8_t geti8(const char * key) {
  int8_t value;
  esp_err_t err = nvs_get_i8(kv_handle, (const char *)key, &value);
  ESP_ERROR_CHECK(err);
  return (int)value;
}

void seti8(const char * key, int8_t value) {
  esp_err_t err = nvs_set_i8(kv_handle, (const char *)key, value);
  ESP_ERROR_CHECK(err);
  nvs_commit(kv_handle);
}

void defaulti8(const char * key, int8_t value) {
  if (!hasi8(key)) {
    seti8(key, value);
  }
}

bool hasui8(const char * key) {
  uint8_t value;
  esp_err_t err = nvs_get_u8(kv_handle, (const char *)key, &value);
  return err == ESP_OK;
}

uint8_t getui8(const char * key) {
  uint8_t value;
  esp_err_t err = nvs_get_u8(kv_handle, (const char *)key, &value);
  ESP_ERROR_CHECK(err);
  return (int)value;
}

void setui8(const char * key, uint8_t value) {
  esp_err_t err = nvs_set_u8(kv_handle, (const char *)key, value);
  ESP_ERROR_CHECK(err);
  nvs_commit(kv_handle);
}

void defaultui8(const char * key, uint8_t value) {
  if (!hasui8(key)) {
    setui8(key, value);
  }
}

bool hasi16(const char * key) {
  int16_t value;
  esp_err_t err = nvs_get_i16(kv_handle, (const char *)key, &value);
  return err == ESP_OK;
}

int16_t geti16(const char * key) {
  int16_t value;
  esp_err_t err = nvs_get_i16(kv_handle, (const char *)key, &value);
  ESP_ERROR_CHECK(err);
  return (int)value;
}

void seti16(const char * key, int16_t value) {
  esp_err_t err = nvs_set_i16(kv_handle, (const char *)key, value);
  ESP_ERROR_CHECK(err);
  nvs_commit(kv_handle);
}

void defaulti16(const char * key, int16_t value) {
  if (!hasi16(key)) {
    seti16(key, value);
  }
}

bool hasui16(const char * key) {
  uint16_t value;
  esp_err_t err = nvs_get_u16(kv_handle, (const char *)key, &value);
  return err == ESP_OK;
}

uint16_t getui16(const char * key) {
  uint16_t value;
  esp_err_t err = nvs_get_u16(kv_handle, (const char *)key, &value);
  ESP_ERROR_CHECK(err);
  return (int)value;
}

void setui16(const char * key, uint16_t value) {
  esp_err_t err = nvs_set_u16(kv_handle, (const char *)key, value);
  ESP_ERROR_CHECK(err);
  nvs_commit(kv_handle);
}

void defaultui16(const char * key, uint16_t value) {
  if (!hasui16(key)) {
    setui16(key, value);
  }
}

bool hasi32(const char * key) {
  int32_t value;
  esp_err_t err = nvs_get_i32(kv_handle, (const char *)key, &value);
  return err == ESP_OK;
}

int32_t geti32(const char * key) {
  int32_t value;
  esp_err_t err = nvs_get_i32(kv_handle, (const char *)key, &value);
  ESP_ERROR_CHECK(err);
  return (int)value;
}

void seti32(const char * key, int32_t value) {
  esp_err_t err = nvs_set_i32(kv_handle, (const char *)key, value);
  ESP_ERROR_CHECK(err);
  nvs_commit(kv_handle);
}

void defaulti32(const char * key, int32_t value) {
  if (!hasi32(key)) {
    seti32(key, value);
  }
}

bool hasui32(const char * key) {
  uint32_t value;
  esp_err_t err = nvs_get_u32(kv_handle, (const char *)key, &value);
  return err == ESP_OK;
}

uint32_t getui32(const char * key) {
  uint32_t value;
  esp_err_t err = nvs_get_u32(kv_handle, (const char *)key, &value);
  ESP_ERROR_CHECK(err);
  return (int)value;
}

void setui32(const char * key, uint32_t value) {
  esp_err_t err = nvs_set_u32(kv_handle, (const char *)key, value);
  ESP_ERROR_CHECK(err);
  nvs_commit(kv_handle);
}

void defaultui32(const char * key, uint32_t value) {
  if (!hasui32(key)) {
    setui32(key, value);
  }
}

bool hasstr(const char * key) {
  size_t length;
  esp_err_t err = nvs_get_str(kv_handle, (const char *)key, NULL, &length);
  return err == ESP_OK;
}

void getstr(const char * key, char *value, size_t length) {
  esp_err_t err = nvs_get_str(kv_handle, key, value, &length);
  ESP_ERROR_CHECK(err);
}

void setstr(const char * key, const char * value) {
  esp_err_t err = nvs_set_str(kv_handle, (const char *)key, value);
  ESP_ERROR_CHECK(err);
  nvs_commit(kv_handle);
}

void defaultstr(const char * key, const char * value) {
  if (!hasstr(key)) {
    setstr(key, value);
  }
}
