/*
 * Copyright (C) 2018  SuperGreenLab <towelie@supergreenlab.com>
 * Author: Constantin Clauzel <constantin.clauzel@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef KV_H_
#define KV_H_

#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include "keys.h"
#include "kv_arrays.h"

#define MAX_KVALUE_SIZE 517

void open_kv();
void init_kv();

int8_t geti8(const char * key);
void seti8(const char * key, int8_t value);
bool hasi8(const char * key);
void defaulti8(const char * key, int8_t value);

uint8_t getui8(const char * key);
void setui8(const char * key, uint8_t value);
bool hasui8(const char * key);
void defaultui8(const char * key, uint8_t value);

int16_t geti16(const char * key);
void seti16(const char * key, int16_t value);
bool hasi16(const char * key);
void defaulti16(const char * key, int16_t value);

uint16_t getui16(const char * key);
void setui16(const char * key, uint16_t value);
bool hasui16(const char * key);
void defaultui16(const char * key, uint16_t value);

int32_t geti32(const char * key);
void seti32(const char * key, int32_t value);
bool hasi32(const char * key);
void defaulti32(const char * key, int32_t value);

uint32_t getui32(const char * key);
void setui32(const char * key, uint32_t value);
bool hasui32(const char * key);
void defaultui32(const char * key, uint32_t value);

void getstr(const char * key, char *value, const size_t length);
void setstr(const char * key, const char * value);
bool hasstr(const char * key);
void defaultstr(const char * key, const char * value);

/*
 * [GENERATED]
 */

<% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].indir.enable && !modules[m].fields[f].func).forEach(f => { f = modules[m].fields[f] %>
  void reset_<%= f.name %>_changed();
  bool is_<%= f.name %>_changed();
  bool is_<%= f.name %>_undefined();
  <% if (f.type == 'integer') { %>
    <%= f.signedness %>int<%= f.intlen %>_t get_<%= f.name %>();
    void set_<%= f.name %>(<%= f.signedness %>int<%= f.intlen %>_t value);
  <% } else { %>
    void get_<%= f.name %>(char *dest, size_t len);
    void set_<%= f.name %>(const char *value);
  <% } %>
<% })}) %>

<% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => modules[m].fields[f].func).forEach(f => { f = modules[m].fields[f] %>

  <% if (f.type == 'integer') { %>

    <% if (modules[m].array_len) { %>
      int <%= f.func.split('(')[0] %>(int);
    <% } else { %>
      int <%= f.func %>();
    <% } %>
    <%= f.signedness %>int<%= f.intlen %>_t get_<%= f.name %>();

  <% } %>
  // TODO implement char* funcs if needed
<% })}) %>

<% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => modules[m].fields[f].indir.enable).forEach(f => { f = modules[m].fields[f] %>
  <% if (f.type == 'integer') { %>
    <%= f.signedness %>int<%= f.intlen %>_t get_<%= f.name %>();
  <% } else { %>
    void get_<%= f.name %>(char *dest, size_t len);
  <% } %>
<% })}) %>

/*
 * [/GENERATED]
 */

#endif
