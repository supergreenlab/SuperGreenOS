/*
 * Copyright (C) 2019  SuperGreenLab <towelie@supergreenlab.com>
 * Author: Constantin Clauzel <constantin.clauzel@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "kv.h"
#include "../include_modules.h"
#include <stdint.h>

<% Object.keys(modules).filter(m => modules[m].enabled).filter(m => modules[m].array_len > 0).forEach(m => {
  m = modules[m]
  Object.keys(m.fields).filter(f => m.fields[f].write_cb && !m.fields[f].indir.enable).forEach(f => { 
    f = m.fields[f]
    let p = f.name.split('_')
    p.splice(0, 2)
    p = p.join('_')
    i = parseInt(f.name.split('_')[1]) %>
    int on_set_<%= m.field_prefix %>_<%= f.suffix %>(int value) {
      return on_set_<%= m.field_prefix %>_<%= p %>(<%= i %>, value);
    }
<% })}) %>

<% 
  // TODO DRY (with .h)
  const arrays = Object.keys(modules).filter(m => modules[m].enabled)
                       .filter(m => modules[m].array_len > 0)
                       .reduce((acc, m) => {
                          const name = modules[m].field_prefix
                          acc[name] = acc[name] || {name, array_len: modules[m].array_len, fields: {}}
                          Object.keys(modules[m].fields)
                                .filter(f => modules[m].fields[f].type == 'integer')
                                .forEach((f) => {
                                  f = modules[m].fields[f]
                                  p = f.name.split('_')
                                  p.splice(0, 2)
                                  p = p.join('_')
                                  acc[name].fields[p] = {name: p, indir: f.indir.enable, intlen: f.intlen, signedness: f.signedness, func: f.func,}
                                })
                          return acc
                       }, {})
%>

<%
  Object.keys(arrays).forEach(a => { a = arrays[a]
    Object.keys(a.fields).forEach(f => { f = a.fields[f] %>
    <%= f.signedness %>int<%= f.intlen %>_t get_<%= a.name %>_<%= f.name %>(int i) {
      switch(i) {
      <% Array(a.array_len).fill().forEach((v, i) => { %>
        case <%= i %>:
          return get_<%= a.name %>_<%= i %>_<%= f.name %>();
      <% }) %>
      }
      return 0;
    }
<% })}) %>

<%
  Object.keys(arrays).forEach(a => { a = arrays[a]
    Object.keys(a.fields).filter(f => !a.fields[f].indir && !a.fields[f].func).forEach(f => { f = a.fields[f] %>
    void set_<%= a.name %>_<%= f.name %>(int i, <%= f.signedness %>int<%= f.intlen %>_t v) {
      switch(i) {
      <% Array(a.array_len).fill().forEach((v, i) => { %>
        case <%= i %>:
          set_<%= a.name %>_<%= i %>_<%= f.name %>(v);
          break;
      <% }) %>
      }
    }
<% })}) %>
