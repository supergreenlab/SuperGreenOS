/*
 * Copyright (C) 2019  SuperGreenLab <towelie@supergreenlab.com>
 * Author: Constantin Clauzel <constantin.clauzel@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <string.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"

#include "kv.h"

/*
 * [GENERATED]
 */

StaticSemaphore_t mutex_buffer;

<% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].indir.enable && !modules[m].fields[f].func).forEach(f => { f = modules[m].fields[f] %>

  static SemaphoreHandle_t _mutex_<%= f.name %>; // TODO check RAM weight of creating so many semaphores :/
  static bool _<%= f.name %>_changed = true;
  static bool _<%= f.name %>_undefined = true;

  void reset_<%= f.name %>_changed() {
    xSemaphoreTake(_mutex_<%= f.name %>, 0);
    _<%= f.name %>_changed = false;
    xSemaphoreGive(_mutex_<%= f.name %>);
  }

  bool is_<%= f.name %>_changed() {
    xSemaphoreTake(_mutex_<%= f.name %>, 0);
    bool v = _<%= f.name %>_changed;
    xSemaphoreGive(_mutex_<%= f.name %>);
    return v;
  }

  bool is_<%= f.name %>_undefined() {
    xSemaphoreTake(_mutex_<%= f.name %>, 0);
    bool v = _<%= f.name %>_undefined;
    xSemaphoreGive(_mutex_<%= f.name %>);
    return v;
  }

  <% if (f.type == 'integer') { %>

    <% if (!f.nvs.enable) { %>
    static <%= f.signedness %>int<%= f.intlen %>_t _<%= f.name %> = <%= f.signedness.toUpperCase() %>INT<%= f.intlen %>_MAX;
    <% } %>

    <%= f.signedness %>int<%= f.intlen %>_t get_<%= f.name %>() {
      <% if (f.nvs.enable) { %>
        return get<%= f.signedness %>i<%= f.intlen %>(<%= f.caps_name %>);
      <% } else { %>
        xSemaphoreTake(_mutex_<%= f.name %>, 0);
        int v = _<%= f.name %>;
        xSemaphoreGive(_mutex_<%= f.name %>);
        return v;
      <% } %>
    }

    void set_<%= f.name %>(<%= f.signedness %>int<%= f.intlen %>_t value) {
      <% if (f.nvs.enable) { %>
        if (get<%= f.signedness %>i<%= f.intlen %>(<%= f.caps_name %>) == value) return;
        set<%= f.signedness %>i<%= f.intlen %>(<%= f.caps_name %>, value);
      <% } %>
      xSemaphoreTake(_mutex_<%= f.name %>, 0);
      <% if (!f.nvs.enable) { %>
        if (_<%= f.name %> == value) return;
        _<%= f.name %> = value;
      <% } %>
      _<%= f.name %>_changed = true;
      _<%= f.name %>_undefined = false;
      xSemaphoreGive(_mutex_<%= f.name %>);
    }

  <% } else { %>

    <% if (!f.nvs.enable) { %>
      static char _<%= f.name %>[MAX_KVALUE_SIZE] = {0};
    <% } %>

    void get_<%= f.name %>(char *dest, size_t len) {
      assert(len <= MAX_KVALUE_SIZE - 1);
      <% if (f.nvs.enable) { %>
        getstr(<%= f.caps_name %>, dest, len);
      <% } else if (f.func) { %>
        <%= f.func %>();
      <% } else { %>
        xSemaphoreTake(_mutex_<%= f.name%>, 0);
        strncpy(dest, _<%= f.name %>, len);
        xSemaphoreGive(_mutex_<%= f.name %>);
      <% } %>
    }

    void set_<%= f.name %>(const char *value) {
      assert(strlen(value) <= MAX_KVALUE_SIZE - 1);
      <% if (f.nvs.enable) { %>
      char old_value[MAX_KVALUE_SIZE] = {0};
      getstr(<%= f.caps_name %>, old_value, MAX_KVALUE_SIZE - 1);
      if (!strcmp(old_value, value)) return;
      setstr(<%= f.caps_name %>, value);
      <% } %>
      xSemaphoreTake(_mutex_<%= f.name %>, 0);
      <% if (!f.nvs.enable) { %>
      if (!strcmp(_<%= f.name %>, value)) return;
      strncpy(_<%= f.name %>, value, strlen(value));
      _<%= f.name %>[strlen(value)] = 0;
      <% } %>
      _<%= f.name %>_changed = true;
      _<%= f.name %>_undefined = false;
      xSemaphoreGive(_mutex_<%= f.name %>);
    }
  <% } %>
<% })}) %>

<% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => modules[m].fields[f].func).forEach(f => { f = modules[m].fields[f] %>

  <% if (f.type == 'integer') { %>

    <%= f.signedness %>int<%= f.intlen %>_t get_<%= f.name %>() {
      <% if (modules[m].array_len) { %>
        return <%= f.func %>;
      <% } else { %>
        return <%= f.func %>();
      <% } %>
    }

  <% } %>
  // TODO implement char* funcs if needed
<% })}) %>


<% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => modules[m].fields[f].indir.enable).forEach(f => { f = modules[m].fields[f] %>
  <% if (f.type == 'integer') { %>
    <%= f.signedness %>int<%= f.intlen %>_t get_<%= f.name %>() {
      switch(get_<%= modules[m].fields[f.indir.source].name %>()) {
      <% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
        Object.keys(modules[m].fields).filter(f2 => modules[m].fields[f2][f.indir.key]).forEach(f2 => { f2 = modules[m].fields[f2] %>
        case <%= f2[f.indir.key] %>:
          return get_<%= f2.name %>();
      <% })}) %>
      }
      return <%= f.default %>;
    }
  <% } else { %>
    void get_<%= f.name %>(char *dest, size_t len) {
      switch(get_<%= modules[m].fields[f.indir.source].name %>()) {
      <% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
        Object.keys(modules[m].fields).filter(f2 => modules[m].fields[f2][f.indir.key]).forEach(f2 => { f2 = modules[m].fields[f2] %>
        case <%= f2[f.indir.key] %>:
          return get_<%= f2.name %>(dest, len);
      <% })}) %>
      }
      return <%= f.default %>;
    }
  <% } %>
<% })}) %>

void init_helpers() {
  <% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
    Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].indir.enable && !modules[m].fields[f].func).forEach(f => { f = modules[m].fields[f]%>
    _mutex_<%= f.name %> = xSemaphoreCreateMutexStatic(&mutex_buffer);
  <% })}) %>
}

/*
 * [/GENERATED]
 */
