/*
 * Copyright (C) 2019  SuperGreenLab <towelie@supergreenlab.com>
 * Author: Constantin Clauzel <constantin.clauzel@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <string.h>

#include "stat_dump.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"

#include "../log/log.h"
#include "../kv/kv.h"

#include "../include_modules.h"

#define MAX_KEY_SIZE 21

static void stat_dump_task(void *param) {
  int counter = 0;
  //wait_connected();
  vTaskDelay(30 * 1000 / portTICK_PERIOD_MS);
  while(1) {
    /*
     * [GENERATED]
     */

    int value;
    char str[MAX_KVALUE_SIZE] = {0};
    <% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
      Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].nosend && !modules[m].fields[f].func).forEach(f => { f = modules[m].fields[f] %>
    if ((counter % <%= f.dump_freq %>) == 0<% if (!f.indir.enable) { %> || is_<%= f.name %>_changed()<% } %>) {
      <% if (f.type == 'integer') { %>
        value = get_<%= f.name %>();
        ESP_LOGI(SGO_LOG_METRIC, "@KV %s=%d", "<%= f.caps_name %>", value);
      <% } else { %>
        get_<%= f.name %>(str, MAX_KVALUE_SIZE-1);
        ESP_LOGI(SGO_LOG_METRIC, "@KV %s=%s", "<%= f.caps_name %>", str);
      <% } %>
      vTaskDelay(200 / portTICK_PERIOD_MS);
      <% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
        Object.keys(modules[m].fields).filter(f => modules[m].fields[f].dump_with == f.name).forEach(f2 => { f2 = modules[m].fields[f2] %>
        <% if (f2.type == 'integer') { %>
          value = get_<%= f2.name %>();
          ESP_LOGI(SGO_LOG_METRIC, "@KV %s=%d", "<%= f2.caps_name %>", value);
        <% } else { %>
          get_<%= f2.name %>(str, MAX_KVALUE_SIZE-1);
          ESP_LOGI(SGO_LOG_METRIC, "@KV %s=%s", "<%= f2.caps_name %>", str);
        <% } %>
        vTaskDelay(200 / portTICK_PERIOD_MS);
      <% })}) %>

      <% if (!f.indir.enable) { %>
      reset_<%= f.name %>_changed();
      <% } %>
    }

    <% })}) %>

    vTaskDelay(5 * 1000 / portTICK_PERIOD_MS);
    ++counter;

    /*
     * [/GENERATED]
     */
  }
}

void init_stat_dump() {
  ESP_LOGI(SGO_LOG_EVENT, "@SYS reset_reason=%d", esp_reset_reason());
  BaseType_t ret = xTaskCreatePinnedToCore(stat_dump_task, "STAT_DUMP", 4096, NULL, 10, NULL, 1);
  if (ret != pdPASS) {
    ESP_LOGE(SGO_LOG_EVENT, "@STAT_DUMP Failed to create task");
  }
}
